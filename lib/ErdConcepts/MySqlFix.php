<?php
//----------------------------------------------------------------------------------------------------------------------
namespace SetBased\ErdConcepts;

use SetBased\Affirm\Affirm;

//----------------------------------------------------------------------------------------------------------------------
/**
 * Class MySql
 *
 * @package SetBased\ErdConcepts\MySql
 */
class MySqlFix
{
  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Maximum length of column comments in MySQL.
   */
  const MAX_COLUMN_COMMENT_LENGTH = 1024;

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Add comments to column definitions based on commented comments.
   *
   * @param string $theSourceCode The SQL code generated by ERD concepts.
   *
   * @return string
   */
  static public function fixComments( $theSourceCode )
  {
    $source_lines = explode( "\n", $theSourceCode );

    // Map from (table_name,column_name) to line number
    $map = array();

    // Scan the source for column definitions.
    $table_name = null;
    foreach ($source_lines as $i => $line)
    {
      if ($table_name)
      {
        if (preg_match( '/^  `(\w+)`/', $source_lines[$i], $matches ))
        {
          $map[$table_name][$matches[1]] = $i;
        }
        else
        {
          $table_name = null;
        }
      }

      if (!$table_name && preg_match( '/^CREATE TABLE `(\w+)`/', $line, $matches ))
      {
        $table_name = $matches[1];
      }
    }

    // Scan the source for comments.
    $comments = array();
    foreach ($source_lines as $i => $line)
    {
      if (preg_match( '/^COMMENT ON COLUMN `(\w+)`.`(\w+)`/', $line, $matches ))
      {
        $comments[$matches[1]][$matches[2]] = $source_lines[$i+1];
      }
    }

    // Enhance the column definitions with comments.
    foreach ($comments as $table_name => $columns)
    {
      if (!isset($map[$table_name])) Affirm::assertFailed( "Table '%s' is not defined.", $table_name );

      foreach ($columns as $column_name => $comment)
      {
        if (!isset($map[$table_name][$column_name]))
        {
          Affirm::assertFailed( "Column '%s' is not defined in '%s' table statements.",
                                $column_name,
                                $table_name );
        }

        $line_number = $map[$table_name][$column_name];

        // Truncate comments longer than 60 characters.
        if (strlen( $comment )>self::MAX_COLUMN_COMMENT_LENGTH)
        {
          $comment = trim( mb_substr( $comment, 0, self::MAX_COLUMN_COMMENT_LENGTH - 3 ) ).'...';
        }

        // Enhance the column definition with comment.
        $source_lines[$line_number] = mb_substr( $source_lines[$line_number], 0, -1 );
        $source_lines[$line_number] .= " COMMENT '".self::escapeMysqlString( $comment )."',";
      }
    }

    $new_source_code = implode( "\n", $source_lines );

    return $new_source_code;
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Escapes special characters in a string for use in an SQL statement.
   *
   * @param string $unescaped_string The string that is to be escaped.
   *
   * @return string
   */
  static protected function escapeMysqlString( $unescaped_string )
  {
    // We prefer to use mysqli::escape_string but this method requires a connection. Since ERD Concepts generates
    // SQL code in UTF-8 and $unescaped_string is not user input (from the evil internet) we can safely use addslashes.
    return addslashes( $unescaped_string );
  }

  //--------------------------------------------------------------------------------------------------------------------
}

//----------------------------------------------------------------------------------------------------------------------
